{
 
module Lexer

open Microsoft.FSharp.Text.Lexing
open Parser;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Distinguish keywords from identifiers: *)

let keyword s =
    match s with
    | "else"  -> ELSE 
    | "end"   -> END
    | "false" -> CSTBOOL false
    | "if"    -> IF
    | "in"    -> IN
    | "let"   -> LET
    | "do"    -> DO
    | "fun"   -> FUN
    | "not"   -> NOT
    | "then"  -> THEN
    | "true"  -> CSTBOOL true
    | "int"   -> INTTYPE
    | "bool"  -> BOOLTYPE
    | "list"  -> LISTTYPE
    | "tree"  -> TREETYPE
    | "match" -> MATCH
    | "with"  -> WITH
    | "Cons"  -> CONS
    | "Nil"   -> NIL
    | "Node"  -> NODE
    | "Leaf"  -> LEAF
    | _       -> NAME s
}

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | '='             { EQ }
  | "<>"            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | '+'             { ADD }                     
  | '-'             { MIN }                     
  | '*'             { MUL }                     
  | '/'             { DIV }                     
  | '%'             { MOD }
  | '('             { LPAR }
  | ')'             { RPAR }
  | '['             { LSB }
  | ']'             { RSB }
  | "->"            { ARROW }
  | '|'				      { PIPE }
  | "::"            { DCOLON }
  | ':'             { COLON }
  | ';'             { SCOLON }
  | ','				      { COMMA }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }